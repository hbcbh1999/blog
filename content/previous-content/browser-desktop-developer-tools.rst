The Browser Desktop, developer tools
####################################
:date: 2010-05-04 15:58
:author: Ian Bicking
:tags: Mozilla, Programming, Web

I find myself working in a Windows environment due to some temporary problems with my Linux installation.  In terms of user experience Windows is not terrible.  But more notable, things mostly just feel the same.  My computing experience is not very dependent on the operating system... *almost*.  Most of what I do is in a web browser -- except programming itself.  Probably a lot of you have the same experience: web browser, text editor, and terminal are pretty much all I need.  I occasionally play with other tools, but none of them stick.  Of course underlying the terminal and text editor UI is a whole host of important software -- interpreters, version control tools, checkouts of all my projects, etc.  So really there's two things keeping us from a browser-only world: a few bits of UI, and a whole bunch of tools.  Can we bridge this?  I'm thinking (more speculatively than as an actual plan): could I stay on Windows without ever having to "use" Windows?

Browsers are clearly capable of implementing a capable UI for a terminal or editor; not a trivial endeavor, but not impossible.  We need a way of handling the tools.  The obvious answer in that case is a virtual machine.  The virtual machine would certainly be using Linux, as there's clear consensus that if you remove the UI and hardware considerations and just consider tools then Linux is by far the best choice -- who uses Mac servers? And Windows is barely worth mentioning.  I worked in a Linux VM for a while but found it really unsatisfying -- but that was using the Linux UI through a VMWare interface.

So instead imagine: you start up a headless VM (remembering the tools are not about UI, so there's no reason to have a graphical user interface on the VM), you point your browser at this VM, and you use a browser-based developer environment that mediates all the tools (the lightest kind of mediation is just simulating a terminal and using existing console-based interfaces).  Look at your existing setup and just imagine a browser window in place of each not-browser-window app you are using.

I'm intrigued then by the idea of adding more to these interfaces, incrementally.  Like HTML in the console, or applications lightly wrapping individual tools.  IDEs never stick for me, maybe in part because I can't commit, and also there's collaboration issues with these tools (I'm never in a team where we would be able to agree on a single environment).  But incremental decentralized improvements seem genuinely workable -- improvement more in the style of the web, the browser providing the central metaphor.

I call this a Browser Desktop because it's a fairly incremental change at this point and other terms (Web OS, Cloud OS) are always presented with unnecessarily hyperbole.  What "operating system" you are using in this imagined system is a somewhat uninteresting semantic question; the OS hasn't *disappeared*, it's just *boring*.  "The Cloud" is fine, but too easy to overthink, and there are many technical reasons to use a hybrid of local and remote pieces.  `"Internet Operating System" <http://radar.oreilly.com/2010/03/state-of-internet-operating-system.html>`_ is more a framing concept than a thing-that-can-be-built.  `Chromium OS <http://www.chromium.org/chromium-os>`_ is essentially the same idea... I'm not really sure how they categorize themselves.

What would be painful right now?  Good Javascript terminals exist.  `Bespin <http://mozillalabs.com/bespin />`_ is hard at work on an editor worthy of being used by programmers.  The browser needs to be an extremely solid platform.  Google Chrome has done a lot in this direction, and Firefox is `moving the same direction with the Electrolysis project <https://wiki.mozilla.org/Electrolysis>`_.  It's okay to punt for now on all the "consumer" issues like music and media handling... and anyway, other people are hard at work on those things.  `Web sockets <http://en.wikipedia.org/wiki/Web_Sockets>`_ will help with some kinds of services that ideally will connect directly to a port; it's not the same as a raw socket, but I feel like there's potential for small intermediaries (e.g., imagine a Javascript app that connects to a locally-hosted server-side app that proxies to ssh).  Also AddOns can be used when necessary (e.g., `ChatZilla <https://addons.mozilla.org/en-US/firefox/addon/16>`).

I'd like much better management of all these "apps" aka pages aka windows or tabs -- things like split screens and workspaces.  Generally I think using such a system heavily will create all sorts of interesting UI tensions.  Which might be annoying for the user, but if it's a constructive annoyance...

On the whole... this seems doable.  It's navel gazing in a sense -- programmers thinking about programming -- but one good thing about navel gazing is that programmers have traditionally been quite good at navel gazing, and while some results aren't generally applicable (e.g., VM management) the exercise will certainly create many generally applicable side products.  It would encourage interesting itch-scratching.  There's lots of other "web OS" efforts out there, but I've never really understood them... they copy desktop metaphors, or have weird filesystem metaphors, or create an unnecessarily cohesive experience.  The web is not cohesive, and I'm pretty okay with that; I don't expect my experiences in this context to be any more cohesive than my tasks are cohesive.  In fact it's exactly the lack of cohesiveness that interests me in this exercise -- the browser mostly gives me the level of cohesiveness I want, and I'm open to experimentation on the rest.  And maybe the biggest interest for me is that I am entirely convinced that traditional GUI applications are a dead end; they rise and fall (mobile apps being a current rise) but I can't seriously imagine long term (10 year) viability for any current or upcoming GUI system.  I'm certain the browser is going to be along for the long haul.  Doing this would let us Live The Future ;)
