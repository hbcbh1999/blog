Core Competencies, Silver Lining, Packaging
###########################################
:date: 2010-04-09 16:31
:author: Ian Bicking
:tags: Packaging, Silver Lining

I've been leaning heavily on Ubuntu and Debian packages for `Silver Lining <http://cloudsilverlining.org>`_.  Lots of "configuration management" problems are easy when you rely on the system packages... not for any magical reason, but because the package maintainers have done the configuration management for me.  This includes dependencies, but also things like starting up services in the right order, and of course upgrades and security fixes.  For this reason I really want everything that isn't part of Silver Lining's core to be in the form of a package.

But then, why isn't *everything* a package?  Arguably some pieces really should be, I'm just too lazy and developing those pieces too quickly to do it.  But more specifically, why aren't applications packages?  It's not the complexity really -- the tool could encapsulate all the complexity of packaging if I chose.  I always knew intuitively it didn't make sense, but it took me a while to decide quite *why*.

There are a lot of specific reasons, but the overriding reason is that I don't want to `outsource a core function <http://www.joelonsoftware.com/articles/fog0000000007.html>`_.  Silver Lining isn't a tool to install database servers.  That is something it does, but that's not its purpose, and so it can install a server with ``apt-get install mysql-server-5.1``.  In doing so it's saving a lot of work, it's building on the knowledge of people more interested in MySQL than I, but it's also deferring a lot of control.  When it comes to actually deploying applications I'm not willing to have Silver Lining defer to another system, because deploying applications is the *entire point* of the tool.

There are many specific reasons.  I want multiple instances of an application deployed simultaneously.  I can optimize the actual code delivery (using rsync) instead of delivering an entire bundle of code. The setup is specific to the environment and configuration I've set up on servers, it's not a generic package that makes sense on a generic Ubuntu system.  I don't want any central repository of packages or a single place where releases have to go through.  I want to allow for the possibility of multiple versions of an application running simultaneously.  I'm coordinating services even as I deploy the application, something which Debian packages try to do a *little*, but don't do consistently or well.  But while there's a list of reasons, it doesn't matter that much -- there's no particular size of list that scared me off, and if I'm misinformed about the way packages work or if there are techniques to avoid these problems it doesn't really matter to me... the real reason is that I don't want to defer control over the one thing that Silver Lining *must* do well.
